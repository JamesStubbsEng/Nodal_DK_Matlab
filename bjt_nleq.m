function [in, jacobian] = bjt_nleq(vn)
%Non-linear elements parameters
paramName.Is = 1e-14;
paramName.betaF = 200;
paramName.betaR = 3;
paramName.Vt = 26e-3;
%BJT currents
IName1 = -paramName.Is/paramName.betaF*(exp( vn(1)/paramName.Vt ) ...
-1) - paramName.Is/paramName.betaR* (exp( (vn(1)-vn(2) ...
)/paramName.Vt ) - 1);
IName2 = -paramName.Is* (exp( vn(1)/paramName.Vt )-1) + ...
paramName.Is*(paramName.betaR+1)/paramName.betaR*(exp( (vn(1)- ...
vn(2))/paramName.Vt ) - 1);
%BJT jacobian
dIName1dVName1 = -paramName.Is/paramName.betaF/paramName.Vt* ...
exp( vn(1) /paramName.Vt ) - paramName.Is/ ...
paramName.betaR/paramName.Vt* exp( (vn(1)-vn(2))/ ...
paramName.Vt );
dIName1dVName2 = paramName.Is/paramName.betaR/paramName.Vt* ...
exp( (vn(1)-vn(2)) /paramName.Vt );
dIName2dVName1 = -paramName.Is/paramName.Vt* exp( ...
vn(1) /paramName.Vt ) + paramName.Is*(paramName.betaR ...
+1)/paramName.betaR/paramName.Vt* exp( (vn(1)-vn(2))/paramName. ...
Vt ) ;
dIName2dVName2 = -paramName.Is*(paramName.betaR+1)/paramName.betaR/ ...
paramName.Vt* exp( (vn(1)-vn(2)) /paramName.Vt );
in = [...
IName1
IName2
];
jacobian = [...
dIName1dVName1 dIName1dVName2;...
dIName2dVName1 dIName2dVName2 ...
];
end

